{"version":3,"sources":["components/ProductDetails.tsx","hooks/useProduct.ts","components/Wrapper.tsx","App.tsx","services/store.ts","reportWebVitals.ts","index.tsx"],"names":["ProductDetails","id","productId","useQuery","store","getProductById","retry","isLoading","isError","error","data","status","mr","message","title","price","description","category","image","spacing","src","boxSize","data-testid","borderRadius","px","colorScheme","size","Wrapper","URL","window","location","href","searchParams","get","display","alignItems","justifyContent","height","background","maxW","minW","overflow","m","p","shadow","textAlign","apiUrl","makeApiCall","apiPath","a","fetch","headers","Accept","resp","ok","Error","text","promise","Promise","resolve","reject","setTimeout","json","this","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","QueryClient","rootElement","document","getElementById","ReactDOM","render","QueryClientProvider"],"mappings":"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","file":"static/js/main.5fd174fb.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n\tBadge,\n\tBox,\n\tHeading,\n\tSpinner,\n\tText,\n\tVStack,\n\tImage,\n\tButton,\n\tAlert,\n\tAlertIcon,\n\tAlertTitle,\n\tAlertDescription,\n} from \"@chakra-ui/react\";\nimport { useProduct } from \"../hooks/useProduct\";\n\nexport interface ProductDetailsProps {\n\t/**\n\t * The ID of the product to be displayed\n\t * @default \"1\"\n\t */\n\tproductId?: string;\n}\nexport const ProductDetails = ({ productId = \"1\" }: ProductDetailsProps) => {\n\tconst { isLoading, isError, error, data } = useProduct(productId);\n\tif (isLoading) {\n\t\treturn (\n\t\t\t<Box>\n\t\t\t\t<Spinner />\n\t\t\t\t<Text>Fetching Data...</Text>\n\t\t\t</Box>\n\t\t);\n\t}\n\n\tif (isError) {\n\t\treturn (\n\t\t\t<Alert status=\"error\">\n\t\t\t\t<AlertIcon />\n\t\t\t\t<AlertTitle mr={2}>Error</AlertTitle>\n\t\t\t\t<AlertDescription>{error?.message}</AlertDescription>\n\t\t\t</Alert>\n\t\t);\n\t}\n\n\tconst { title, price, description, category, image } = data || {};\n\n\treturn (\n\t\t<Box>\n\t\t\t<VStack spacing=\"3\">\n\t\t\t\t<Image src={image} boxSize=\"150px\" data-testid=\"product-image\"/>\n\t\t\t\t<Badge borderRadius=\"full\" px=\"2\" colorScheme=\"pink\">\n\t\t\t\t\t{category}\n\t\t\t\t</Badge>\n\t\t\t\t<Heading size=\"lg\">{title}</Heading>\n\t\t\t\t<Text>{description}</Text>\n\t\t\t\t<Button colorScheme=\"blue\">Buy Now &bull; ${price}</Button>\n\t\t\t</VStack>\n\t\t</Box>\n\t);\n};\n","import { useQuery } from \"react-query\";\nimport { store } from \"../App\";\nimport { Product } from \"../services/types\";\n\nexport const useProduct = (id: string) => {\n    return useQuery<Product, Error>([\"product\", id], () => store.getProductById(id), { retry: false })\n}","import React from \"react\";\nimport { Box } from \"@chakra-ui/react\";\nimport { ProductDetails } from \"./ProductDetails\";\n\nexport const Wrapper = () => {\n\t// Allow the use of query parameters to define the id of the product to be fetched\n\tconst { searchParams } = new URL(window.location.href);\n\tconst productId = searchParams.get(\"id\") || \"1\";\n\n\treturn (\n\t\t<Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" height=\"100vh\" background=\"gray.200\">\n\t\t\t<Box\n\t\t\t\tmaxW=\"lg\"\n\t\t\t\tminW=\"sm\"\n\t\t\t\tborderRadius=\"lg\"\n\t\t\t\toverflow=\"hidden\"\n\t\t\t\tm=\"10\"\n\t\t\t\tp=\"10\"\n\t\t\t\tshadow=\"xl\"\n\t\t\t\tbackground=\"white\"\n\t\t\t\ttextAlign=\"center\"\n\t\t\t>\n\t\t\t\t<ProductDetails productId={productId} />\n\t\t\t</Box>\n\t\t</Box>\n\t);\n};\n","import React from 'react';\nimport { Wrapper } from \"./components/Wrapper\";\nimport { StoreApi } from \"./services/store\";\n\nexport const store = new StoreApi(\"https://fakestoreapi.com\");\n\nexport default function App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Wrapper />\n\t\t</div>\n\t);\n}\n","import { Product } from \"./types\";\n\nexport class StoreApi {\n    apiUrl: string;\n    constructor(apiUrl: string) {\n        this.apiUrl = apiUrl;\n    }\n\n    private makeApiCall = async <T>(\n        apiPath: string\n    ): Promise<T> => {\n        const resp = await fetch(`${this.apiUrl}${apiPath}`, {\n            headers: {\n                Accept: \"application/json\"\n            }\n        })\n\n        if (!resp.ok) {\n            throw new Error(\n                `Error from api call ${apiPath}: status=${resp.status\n                } ${await resp.text()}`\n            );\n        }\n\n        const promise = new Promise((resolve, reject) => {\n            setTimeout(resolve, 1000)\n        })\n        await promise;\n\n        return resp.json();\n    };\n\n    public getProductById = async (id: string): Promise<Product> => {\n        const resp = await this.makeApiCall<Product>(`/products/${id}`);\n        if (!resp?.id) {\n            // FakeStoreAPI returns an empty object when a product isn't found,\n            // So we throw a error.\n            throw new Error(\"Product not found\");\n        }\n        return resp;\n    }\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\n// Initialize React-Query Client\nconst client = new QueryClient();\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n\t<StrictMode>\n\t\t<QueryClientProvider client={client}>\n\t\t\t<ChakraProvider>\n\t\t\t\t<App />\n\t\t\t</ChakraProvider>\n\t\t</QueryClientProvider>\n\t</StrictMode>,\n\trootElement,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}